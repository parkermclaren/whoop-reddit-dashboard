RedditAPIClient
@devvit/public-api v0.11.15-dev

Class: RedditAPIClient
The Reddit API Client

To use the Reddit API Client, add it to the plugin configuration at the top of the file.

Example
Devvit.configure({
  redditAPI: true,
  // other plugins
});

// use within one of our capability handlers e.g. Menu Actions, Triggers, Scheduled Job Type, etc
async (event, context) => {
  const subreddit = await context.reddit.getSubredditById(context.subredditId);
  context.reddit.submitPost({
    subredditName: subreddit.name,
    title: 'test post',
    text: 'test body',
  });
  // additional code
};

Constructors

new RedditAPIClient()
new RedditAPIClient(metadata): RedditAPIClient

Parameters
metadata
Metadata

Returns
RedditAPIClient

Accessors

modMail
Get Signature
get modMail(): ModMailService

Get ModMail API object

Example
await reddit.modMail.reply({
  body: "Here is my message",
  conversationId: "abcd42";
})

Returns
ModMailService

Methods

addEditorToWikiPage()
addEditorToWikiPage(subredditName, page, username): Promise<void>

Add an editor to a wiki page.

Parameters
subredditName
string

The name of the subreddit the wiki is in.

page
string

The name of the wiki page to add the editor to.

username
string

The username of the user to add as an editor.

Returns
Promise<void>


addModNote()
addModNote(options): Promise<ModNote>

Add a mod note.

Parameters
options
Prettify

Options for the request

Returns
Promise<ModNote>

A Promise that resolves if the mod note was successfully added.


addRemovalNote()
addRemovalNote(options): Promise<void>

Add a mod note for why a post or comment was removed

Parameters
options
Prettify

Returns
Promise<void>


addSubredditRemovalReason()
addSubredditRemovalReason(subredditName, options): Promise<string>

Add a removal reason to a subreddit

Parameters
subredditName
string

Name of the subreddit being removed.

options
Options.

message
string

The message associated with the removal reason.

title
string

The title of the removal reason.

Returns
Promise<string>

Removal Reason ID

Example
const newReason = await reddit.addSubredditRemovalReasons('askReddit', {
  title: 'Spam',
  message: 'This is spam!',
});
console.log(newReason.id);


addWidget()
addWidget(widgetData): Promise<Widget>

Add a widget to a subreddit.

Parameters
widgetData
AddWidgetData

The data for the widget to add.

Returns
Promise<Widget>

The added Widget object.

addWikiContributor()
addWikiContributor(username, subredditName): Promise<void>

Add a user as a wiki contributor for a subreddit.

Parameters
username
string

The username of the user to add as a wiki contributor. e.g. 'spez'

subredditName
string

The name of the subreddit to add the user as a wiki contributor. e.g. 'memes'

Returns
Promise<void>


approve()
approve(id): Promise<void>

Approve a post or comment.

Parameters
id
string

The id of the post (t3*) or comment (t1*) to approve.

Returns
Promise<void>

Example
await reddit.approve('t3_123456');
await reddit.approve('t1_123456');


approveUser()
approveUser(username, subredditName): Promise<void>

Approve a user to post in a subreddit.

Parameters
username
string

The username of the user to approve. e.g. 'spez'

subredditName
string

The name of the subreddit to approve the user in. e.g. 'memes'

Returns
Promise<void>


banUser()
banUser(options): Promise<void>

Ban a user from a subreddit.

Parameters
options
BanUserOptions

Options for the request

Returns
Promise<void>


banWikiContributor()
banWikiContributor(options): Promise<void>

Ban a user from contributing to the wiki on a subreddit.

Parameters
options
BanWikiContributorOptions

Options for the request

Returns
Promise<void>


createPostFlairTemplate()
createPostFlairTemplate(options): Promise<FlairTemplate>

Create a post flair template for a subreddit.

Parameters
options
CreateFlairTemplateOptions

Options for the request

Returns
Promise<FlairTemplate>

The created FlairTemplate object.


createUserFlairTemplate()
createUserFlairTemplate(options): Promise<FlairTemplate>

Create a user flair template for a subreddit.

Parameters
options
CreateFlairTemplateOptions

Options for the request

Returns
Promise<FlairTemplate>

The created FlairTemplate object.


createWikiPage()
createWikiPage(options): Promise<WikiPage>

Create a new wiki page for a subreddit.

Parameters
options
CreateWikiPageOptions

Options for the request

Returns
Promise<WikiPage>

The created WikiPage object.

crosspost()
crosspost(options): Promise<Post>

Crossposts a post to a subreddit.

Parameters
options
CrosspostOptions

Options for crossposting a post

Returns
Promise<Post>

A Promise that resolves to a Post object.

deleteFlairTemplate()
deleteFlairTemplate(subredditName, flairTemplateId): Promise<void>

Delete a flair template from a subreddit.

Parameters
subredditName
string

The name of the subreddit to delete the flair template from.

flairTemplateId
string

The ID of the flair template to delete.

Returns
Promise<void>


deleteModNote()
deleteModNote(options): Promise<boolean>

Delete a mod note.

Parameters
options
Prettify

Options for the request

Returns
Promise<boolean>

True if it was deleted successfully; false otherwise.


deleteWidget()
deleteWidget(subredditName, widgetId): Promise<void>

Delete a widget from a subreddit.

Parameters
subredditName
string

The name of the subreddit to delete the widget from.

widgetId
string

The ID of the widget to delete.

Returns
Promise<void>


editFlairTemplate()
editFlairTemplate(options): Promise<FlairTemplate>

Edit a flair template for a subreddit. This can be either a post or user flair template. Note: If you leave any of the options fields as undefined, they will reset to their default values.

Parameters
options
EditFlairTemplateOptions

Options for the request

Returns
Promise<FlairTemplate>

The edited FlairTemplate object.


getApprovedUsers()
getApprovedUsers(options): Listing<User>

Get a list of users who have been approved to post in a subreddit.

Parameters
options
GetSubredditUsersOptions

Options for the request

Returns
Listing<User>

A Listing of User objects.


getAppUser()
getAppUser(): Promise<User>

Get the user that the app runs as on the provided metadata.

Returns
Promise<User>

A Promise that resolves to a User object.

Example
const user = await reddit.getAppUser(metadata);


getBannedUsers()
getBannedUsers(options): Listing<User>

Get a list of users who are banned from a subreddit.

Parameters
options
GetSubredditUsersOptions

Options for the request

Returns
Listing<User>

A Listing of User objects.


getBannedWikiContributors()
getBannedWikiContributors(options): Listing<User>

Get a list of users who are banned from contributing to the wiki on a subreddit.

Parameters
options
GetSubredditUsersOptions

Options for the request

Returns
Listing<User>

A Listing of User objects.


getCommentById()
getCommentById(id): Promise<Comment>

Get a Comment object by ID

Parameters
id
string

The ID (starting with t1_) of the comment to retrieve. e.g. t1_1qjpg

Returns
Promise<Comment>

A Promise that resolves to a Comment object.

Example
const comment = await reddit.getCommentById('t1_1qjpg');


getComments()
getComments(options): Listing<Comment>

Get a list of comments from a specific post or comment.

Parameters
options
GetCommentsOptions

Options for the request

Returns
Listing<Comment>

A Listing of Comment objects.

Example
const comments = await reddit
  .getComments({
    postId: 't3_1qjpg',
    limit: 1000,
    pageSize: 100,
  })
  .all();


getCommentsAndPostsByUser()
getCommentsAndPostsByUser(options): Listing<Post | Comment>

Get a list of posts and comments from a specific user.

Parameters
options
GetUserOverviewOptions

Options for the request

Returns
Listing<Post | Comment>

A Listing of Post and Comment objects.


getCommentsByUser()
getCommentsByUser(options): Listing<Comment>

Get a list of comments by a specific user.

Parameters
options
GetCommentsByUserOptions

Options for the request

Returns
Listing<Comment>

A Listing of Comment objects.


getControversialPosts()
getControversialPosts(options): Listing<Post>

Get a list of controversial posts from a specific subreddit.

Parameters
options
GetPostsOptionsWithTimeframe

Options for the request

Returns
Listing<Post>

A Listing of Post objects.

Example
const posts = await reddit
  .getControversialPosts({
    subredditName: 'memes',
    timeframe: 'day',
    limit: 1000,
    pageSize: 100,
  })
  .all();


getCurrentSubreddit()
getCurrentSubreddit(): Promise<Subreddit>

Retrieves the current subreddit.

Returns
Promise<Subreddit>

A Promise that resolves a Subreddit object.

Example
const currentSubreddit = await reddit.getCurrentSubreddit();


getCurrentSubredditName()
getCurrentSubredditName(): Promise<string>

Retrieves the name of the current subreddit.

Returns
Promise<string>

A Promise that resolves a string representing the current subreddit's name.

Example
const currentSubredditName = await reddit.getCurrentSubredditName();


getCurrentUser()
getCurrentUser(): Promise<undefined | User>

Get the current calling user. Resolves to undefined for logged-out custom post renders.

Returns
Promise<undefined | User>

A Promise that resolves to a User object or undefined

Example
const user = await reddit.getCurrentUser();


getCurrentUsername()
getCurrentUsername(): Promise<undefined | string>

Get the current calling user's username. Resolves to undefined for logged-out custom post renders.

Returns
Promise<undefined | string>

A Promise that resolves to a string representing the username or undefined

Example
const username = await reddit.getCurrentUsername();


getEdited()
Call Signature
getEdited(options): Listing<Comment>

Return a listing of things that have been edited recently.

Parameters
options
ModLogOptions<"comment">

Returns
Listing<Comment>

Example
const subreddit = await reddit.getSubredditByName('mysubreddit');
let listing = await subreddit.getEdited();
console.log('Posts and Comments: ', await listing.all());
listing = await subreddit.getEdited({ type: 'post' });
console.log('Posts: ', await listing.all());

Call Signature
getEdited(options): Listing<Post>

Return a listing of things that have been edited recently.

Parameters
options
ModLogOptions<"post">

Returns
Listing<Post>

Example
const subreddit = await reddit.getSubredditByName('mysubreddit');
let listing = await subreddit.getEdited();
console.log('Posts and Comments: ', await listing.all());
listing = await subreddit.getEdited({ type: 'post' });
console.log('Posts: ', await listing.all());

Call Signature
getEdited(options): Listing<Post | Comment>

Return a listing of things that have been edited recently.

Parameters
options
ModLogOptions<"all">

Returns
Listing<Post | Comment>

Example
const subreddit = await reddit.getSubredditByName('mysubreddit');
let listing = await subreddit.getEdited();
console.log('Posts and Comments: ', await listing.all());
listing = await subreddit.getEdited({ type: 'post' });
console.log('Posts: ', await listing.all());


getHotPosts()
getHotPosts(options): Listing<Post>

Get a list of hot posts from a specific subreddit.

Parameters
options
GetHotPostsOptions

Options for the request

Returns
Listing<Post>

A Listing of Post objects.

Example
const posts = await reddit
  .getHotPosts({
    subredditName: 'memes',
    timeframe: 'day',
    limit: 1000,
    pageSize: 100,
  })
  .all();


getMessages()
getMessages(options): Promise<Listing<PrivateMessage>>

Get private messages sent to the currently authenticated user.

Parameters
options
Prettify

Options for the request

Returns
Promise<Listing<PrivateMessage>>


getModerationLog()
getModerationLog(options): Listing<ModAction>

Get the moderation log for a subreddit.

Parameters
options
GetModerationLogOptions

Options for the request

Returns
Listing<ModAction>

A Listing of ModAction objects.

Example
const modActions = await reddit
  .getModerationLog({
    subredditName: 'memes',
    moderatorUsernames: ['spez'],
    type: 'banuser',
    limit: 1000,
    pageSize: 100,
  })
  .all();


getModerators()
getModerators(options): Listing<User>

Get a list of users who are moderators for a subreddit.

Parameters
options
GetSubredditUsersOptions

Options for the request

Returns
Listing<User>

A Listing of User objects.


getModNotes()
getModNotes(options): Listing<ModNote>

Get a list of mod notes related to a user in a subreddit.

Parameters
options
Prettify

Options for the request

Returns
Listing<ModNote>

A listing of ModNote objects.


getModQueue()
Call Signature
getModQueue(options): Listing<Comment>

Return a listing of things requiring moderator review, such as reported things and items.

Parameters
options
ModLogOptions<"comment">

Returns
Listing<Comment>

Example
const subreddit = await reddit.getSubredditByName('mysubreddit');
let listing = await subreddit.getModQueue();
console.log('Posts and Comments: ', await listing.all());
listing = await subreddit.getModQueue({ type: 'post' });
console.log('Posts: ', await listing.all());

Call Signature
getModQueue(options): Listing<Post>

Return a listing of things requiring moderator review, such as reported things and items.

Parameters
options
ModLogOptions<"post">

Returns
Listing<Post>

Example
const subreddit = await reddit.getSubredditByName('mysubreddit');
let listing = await subreddit.getModQueue();
console.log('Posts and Comments: ', await listing.all());
listing = await subreddit.getModQueue({ type: 'post' });
console.log('Posts: ', await listing.all());

Call Signature
getModQueue(options): Listing<Post | Comment>

Return a listing of things requiring moderator review, such as reported things and items.

Parameters
options
ModLogOptions<"all">

Returns
Listing<Post | Comment>

Example
const subreddit = await reddit.getSubredditByName('mysubreddit');
let listing = await subreddit.getModQueue();
console.log('Posts and Comments: ', await listing.all());
listing = await subreddit.getModQueue({ type: 'post' });
console.log('Posts: ', await listing.all());


getMutedUsers()
getMutedUsers(options): Listing<User>

Get a list of users who are muted in a subreddit.

Parameters
options
GetSubredditUsersOptions

Options for the request

Returns
Listing<User>

A listing of User objects.


getNewPosts()
getNewPosts(options): Listing<Post>

Get a list of new posts from a specific subreddit.

Parameters
options
GetPostsOptions

Options for the request

Returns
Listing<Post>

A Listing of Post objects.

Example
const posts = await reddit
  .getNewPosts({
    subredditName: 'memes',
    limit: 1000,
    pageSize: 100,
  })
  .all();


getPostById()
getPostById(id): Promise<Post>

Gets a Post object by ID

Parameters
id
string

Returns
Promise<Post>

A Promise that resolves to a Post object.


getPostFlairTemplates()
getPostFlairTemplates(subredditName): Promise<FlairTemplate[]>

Get the list of post flair templates for a subreddit.

Parameters
subredditName
string

The name of the subreddit to get the post flair templates for.

Returns
Promise<FlairTemplate[]>

A Promise that resolves with an array of FlairTemplate objects.


getPostsByUser()
getPostsByUser(options): Listing<Post>

Get a list of posts from a specific user.

Parameters
options
GetPostsByUserOptions

Options for the request

Returns
Listing<Post>

A Listing of Post objects.


getReports()
Call Signature
getReports(options): Listing<Comment>

Return a listing of things that have been reported.

Parameters
options
ModLogOptions<"comment">

Returns
Listing<Comment>

Example
const subreddit = await reddit.getSubredditByName('mysubreddit');
let listing = await subreddit.getReports();
console.log('Posts and Comments: ', await listing.all());
listing = await subreddit.getReports({ type: 'post' });
console.log('Posts: ', await listing.all());

Call Signature
getReports(options): Listing<Post>

Return a listing of things that have been reported.

Parameters
options
ModLogOptions<"post">

Returns
Listing<Post>

Example
const subreddit = await reddit.getSubredditByName('mysubreddit');
let listing = await subreddit.getReports();
console.log('Posts and Comments: ', await listing.all());
listing = await subreddit.getReports({ type: 'post' });
console.log('Posts: ', await listing.all());

Call Signature
getReports(options): Listing<Post | Comment>

Return a listing of things that have been reported.

Parameters
options
ModLogOptions<"all">

Returns
Listing<Post | Comment>

Example
const subreddit = await reddit.getSubredditByName('mysubreddit');
let listing = await subreddit.getReports();
console.log('Posts and Comments: ', await listing.all());
listing = await subreddit.getReports({ type: 'post' });
console.log('Posts: ', await listing.all());


getRisingPosts()
getRisingPosts(options): Listing<Post>

Get a list of hot posts from a specific subreddit.

Parameters
options
GetPostsOptions

Options for the request

Returns
Listing<Post>

A Listing of Post objects.

Example
const posts = await reddit
  .getRisingPosts({
    subredditName: 'memes',
    timeframe: 'day',
    limit: 1000,
    pageSize: 100,
  })
  .all();


getSnoovatarUrl()
getSnoovatarUrl(username): Promise<undefined | string>

Get the snoovatar URL for a given username.

Parameters
username
string

The username of the snoovatar to retrieve

Returns
Promise<undefined | string>

A Promise that resolves to a URL of the snoovatar image if it exists.


getSpam()
Call Signature
getSpam(options): Listing<Comment>

Return a listing of things that have been marked as spam or otherwise removed.

Parameters
options
ModLogOptions<"comment">

Returns
Listing<Comment>

Example
const subreddit = await reddit.getSubredditByName('mysubreddit');
let listing = await subreddit.getSpam();
console.log('Posts and Comments: ', await listing.all());
listing = await subreddit.getSpam({ type: 'post' });
console.log('Posts: ', await listing.all());

Call Signature
getSpam(options): Listing<Post>

Return a listing of things that have been marked as spam or otherwise removed.

Parameters
options
ModLogOptions<"post">

Returns
Listing<Post>

Example
const subreddit = await reddit.getSubredditByName('mysubreddit');
let listing = await subreddit.getSpam();
console.log('Posts and Comments: ', await listing.all());
listing = await subreddit.getSpam({ type: 'post' });
console.log('Posts: ', await listing.all());

Call Signature
getSpam(options): Listing<Post | Comment>

Return a listing of things that have been marked as spam or otherwise removed.

Parameters
options
ModLogOptions<"all">

Returns
Listing<Post | Comment>

Example
const subreddit = await reddit.getSubredditByName('mysubreddit');
let listing = await subreddit.getSpam();
console.log('Posts and Comments: ', await listing.all());
listing = await subreddit.getSpam({ type: 'post' });
console.log('Posts: ', await listing.all());


getSubredditById()
getSubredditById(id): Promise<undefined | Subreddit>

Gets a Subreddit object by ID

Parameters
id
string

The ID (starting with t5_) of the subreddit to retrieve. e.g. t5_2qjpg

Returns
Promise<undefined | Subreddit>

A Promise that resolves a Subreddit object.

Deprecated
Use getSubredditInfoById instead.

Example
const memes = await reddit.getSubredditById('t5_2qjpg');


getSubredditByName()
getSubredditByName(name): Promise<Subreddit>

Gets a Subreddit object by name

Parameters
name
string

The name of a subreddit omitting the r/. This is case insensitive.

Returns
Promise<Subreddit>

A Promise that resolves a Subreddit object.

Deprecated
Use getSubredditInfoByName instead.

Example
const askReddit = await reddit.getSubredditByName('askReddit');


getSubredditInfoById()
getSubredditInfoById(id): Promise<SubredditInfo>

Gets a SubredditInfo object by ID

Parameters
id
string

The ID (starting with t5_) of the subreddit to retrieve. e.g. t5_2qjpg

Returns
Promise<SubredditInfo>

A Promise that resolves a SubredditInfo object.

Example
const memes = await reddit.getSubredditInfoById('t5_2qjpg');


getSubredditInfoByName()
getSubredditInfoByName(name): Promise<SubredditInfo>

Gets a SubredditInfo object by name

Parameters
name
string

The name of a subreddit omitting the r/. This is case insensitive.

Returns
Promise<SubredditInfo>

A Promise that resolves a SubredditInfo object.

Example
const askReddit = await reddit.getSubredditInfoByName('askReddit');


getSubredditLeaderboard()
getSubredditLeaderboard(subredditId): Promise<SubredditLeaderboard>

Returns a leaderboard for a given subreddit ID.

Parameters
subredditId
string

ID of the subreddit for which the leaderboard is being queried.

Returns
Promise<SubredditLeaderboard>

Leaderboard for the given subreddit.


getSubredditRemovalReasons()
getSubredditRemovalReasons(subredditName): Promise<RemovalReason[]>

Get the list of subreddit's removal reasons (ordered)

Parameters
subredditName
string

Returns
Promise<RemovalReason[]>

Ordered array of Removal Reasons

Example
const reasons = await reddit.getSubredditRemovalReasons('askReddit');

for (let reason of reasons) {
  console.log(reason.id, reason.message, reason.title);
}


getSubredditStyles()
getSubredditStyles(subredditId): Promise<SubredditStyles>

Returns the styles for a given subreddit ID.

Parameters
subredditId
string

ID of the subreddit from which to retrieve the styles.

Returns
Promise<SubredditStyles>

Styles for the given subreddit.


getTopPosts()
getTopPosts(options): Listing<Post>

Get a list of controversial posts from a specific subreddit.

Parameters
options
GetPostsOptionsWithTimeframe

Options for the request

Returns
Listing<Post>

A Listing of Post objects.

Example
const posts = await reddit
  .getControversialPosts({
    subredditName: 'memes',
    timeframe: 'day',
    limit: 1000,
    pageSize: 100,
  })
  .all();


getUnmoderated()
Call Signature
getUnmoderated(options): Listing<Comment>

Return a listing of things that have yet to be approved/removed by a mod.

Parameters
options
ModLogOptions<"comment">

Returns
Listing<Comment>

Example
const subreddit = await reddit.getSubredditByName('mysubreddit');
let listing = await subreddit.getUnmoderated();
console.log('Posts and Comments: ', await listing.all());
listing = await subreddit.getUnmoderated({ type: 'post' });
console.log('Posts: ', await listing.all());

Call Signature
getUnmoderated(options): Listing<Post>

Return a listing of things that have yet to be approved/removed by a mod.

Parameters
options
ModLogOptions<"post">

Returns
Listing<Post>

Example
const subreddit = await reddit.getSubredditByName('mysubreddit');
let listing = await subreddit.getUnmoderated();
console.log('Posts and Comments: ', await listing.all());
listing = await subreddit.getUnmoderated({ type: 'post' });
console.log('Posts: ', await listing.all());

Call Signature
getUnmoderated(options): Listing<Post | Comment>

Return a listing of things that have yet to be approved/removed by a mod.

Parameters
options
ModLogOptions<"all">

Returns
Listing<Post | Comment>

Example
const subreddit = await reddit.getSubredditByName('mysubreddit');
let listing = await subreddit.getUnmoderated();
console.log('Posts and Comments: ', await listing.all());
listing = await subreddit.getUnmoderated({ type: 'post' });
console.log('Posts: ', await listing.all());


getUserById()
getUserById(id): Promise<undefined | User>

Gets a User object by ID

Parameters
id
string

The ID (starting with t2_) of the user to retrieve. e.g. t2_1qjpg

Returns
Promise<undefined | User>

A Promise that resolves to a User object.

Example
const user = await reddit.getUserById('t2_1qjpg');


getUserByUsername()
getUserByUsername(username): Promise<undefined | User>

Gets a User object by username

Parameters
username
string

The username of the user omitting the u/. e.g. 'devvit'

Returns
Promise<undefined | User>

A Promise that resolves to a User object or undefined if user is not found (user doesn't exist, account suspended, etc).

Example
const user = await reddit.getUserByUsername('devvit');
if (user) {
  console.log(user);
}


getUserFlairTemplates()
getUserFlairTemplates(subredditName): Promise<FlairTemplate[]>

Get the list of user flair templates for a subreddit.

Parameters
subredditName
string

The name of the subreddit to get the user flair templates for.

Returns
Promise<FlairTemplate[]>

A Promise that resolves with an array of FlairTemplate objects.


getVaultByAddress()
getVaultByAddress(address): Promise<Vault>

Gets a Vault for the specified address.

Parameters
address
string

The address (starting with 0x) of the Vault.

Returns
Promise<Vault>

Example
const vault = await reddit.getVaultByAddress('0x205ee28744456bDBf180A0Fa7De51e0F116d54Ed');


getVaultByUserId()
getVaultByUserId(userId): Promise<Vault>

Gets a Vault for the specified user.

Parameters
userId
string

The ID (starting with t2_) of the Vault owner.

Returns
Promise<Vault>

Example
const vault = await reddit.getVaultByUserId('t2_1w72');


getWidgets()
getWidgets(subredditName): Promise<Widget[]>

Get the widgets for a subreddit.

Parameters
subredditName
string

The name of the subreddit to get the widgets for.

Returns
Promise<Widget[]>

An array of Widget objects.

getWikiContributors()
getWikiContributors(options): Listing<User>

Get a list of users who are wiki contributors of a subreddit.

Parameters
options
GetSubredditUsersOptions

Options for the request

Returns
Listing<User>

A Listing of User objects.


getWikiPage()
getWikiPage(subredditName, page): Promise<WikiPage>

Get a wiki page from a subreddit.

Parameters
subredditName
string

The name of the subreddit to get the wiki page from.

page
string

The name of the wiki page to get.

Returns
Promise<WikiPage>

The requested WikiPage object.


getWikiPageRevisions()
getWikiPageRevisions(options): Listing<WikiPageRevision>

Get the revisions for a wiki page.

Parameters
options
GetPageRevisionsOptions

Options for the request

Returns
Listing<WikiPageRevision>

A Listing of WikiPageRevision objects.


getWikiPages()
getWikiPages(subredditName): Promise<string[]>

Get the wiki pages for a subreddit.

Parameters
subredditName
string

The name of the subreddit to get the wiki pages from.

Returns
Promise<string[]>

A list of the wiki page names for the subreddit.


getWikiPageSettings()
getWikiPageSettings(subredditName, page): Promise<WikiPageSettings>

Get the settings for a wiki page.

Parameters
subredditName
string

The name of the subreddit the wiki is in.

page
string

The name of the wiki page to get the settings for.

Returns
Promise<WikiPageSettings>

A WikiPageSettings object.


inviteModerator()
inviteModerator(options): Promise<void>

Invite a user to become a moderator of a subreddit.

Parameters
options
InviteModeratorOptions

Options for the request

Returns
Promise<void>


markAllMessagesAsRead()
markAllMessagesAsRead(): Promise<void>

Mark all private messages as read.

Returns
Promise<void>


muteUser()
muteUser(options): Promise<void>

Mute a user in a subreddit. Muting a user prevents them from sending modmail.

Parameters
options
MuteUserOptions

Options for the request

Returns
Promise<void>


remove()
remove(id, isSpam): Promise<void>

Remove a post or comment.

Parameters
id
string

The id of the post (t3*) or comment (t1*) to remove.

isSpam
boolean

Is the post or comment being removed because it's spam?

Returns
Promise<void>

Example
await reddit.remove('t3_123456', false);
await reddit.remove('t1_123456', true);


removeEditorFromWikiPage()
removeEditorFromWikiPage(subredditName, page, username): Promise<void>

Remove an editor from a wiki page.

Parameters
subredditName
string

The name of the subreddit the wiki is in.

page
string

The name of the wiki page to remove the editor from.

username
string

The username of the user to remove as an editor.

Returns
Promise<void>


removeModerator()
removeModerator(username, subredditName): Promise<void>

Remove a user as a moderator of a subreddit.

Parameters
username
string

The username of the user to remove as a moderator. e.g. 'spez'

subredditName
string

The name of the subreddit to remove the user as a moderator from. e.g. 'memes'

Returns
Promise<void>


removePostFlair()
removePostFlair(subredditName, postId): Promise<void>

Remove the flair for a post in a subreddit.

Parameters
subredditName
string

The name of the subreddit to remove the flair from.

postId
string

The ID of the post to remove the flair from.

Returns
Promise<void>


removeUser()
removeUser(username, subredditName): Promise<void>

Remove a user's approval to post in a subreddit.

Parameters
username
string

The username of the user to remove approval from. e.g. 'spez'

subredditName
string

The name of the subreddit to remove the user's approval from. e.g. 'memes'

Returns
Promise<void>


removeUserFlair()
removeUserFlair(subredditName, username): Promise<void>

Remove the flair for a user in a subreddit.

Parameters
subredditName
string

The name of the subreddit to remove the flair from.

username
string

The username of the user to remove the flair from.

Returns
Promise<void>


removeWikiContributor()
removeWikiContributor(username, subredditName): Promise<void>

Remove a user's wiki contributor status for a subreddit.

Parameters
username
string

The username of the user to remove wiki contributor status from. e.g. 'spez'

subredditName
string

The name of the subreddit to remove the user's wiki contributor status from. e.g. 'memes'

Returns
Promise<void>


reorderWidgets()
reorderWidgets(subredditName, orderByIds): Promise<void>

Reorder the widgets for a subreddit.

Parameters
subredditName
string

The name of the subreddit to reorder the widgets for.

orderByIds
string[]

An array of widget IDs in the order that they should be displayed.

Returns
Promise<void>


report()
report(thing, options): Promise<JsonStatus>

Report a Post or Comment

The report is sent to the moderators of the subreddit for review.

Parameters
thing
Post or Comment

Post | Comment

options
Options

reason
string

Why the thing is reported

Returns
Promise<JsonStatus>

Example
await reddit.report(post, {
  reason: 'This is spam!',
});


revertWikiPage()
revertWikiPage(subredditName, page, revisionId): Promise<void>

Revert a wiki page to a previous revision.

Parameters
subredditName
string

The name of the subreddit the wiki is in.

page
string

The name of the wiki page to revert.

revisionId
string

The ID of the revision to revert to.

Returns
Promise<void>


revokeModeratorInvite()
revokeModeratorInvite(username, subredditName): Promise<void>

Revoke a moderator invite for a user to a subreddit.

Parameters
username
string

The username of the user to revoke the invite for. e.g. 'spez'

subredditName
string

The name of the subreddit to revoke the invite for. e.g. 'memes'

Returns
Promise<void>


sendPrivateMessage()
sendPrivateMessage(options): Promise<void>

Sends a private message to a user.

Parameters
options
SendPrivateMessageOptions

The options for sending the message.

Returns
Promise<void>

A Promise that resolves if the private message was successfully sent.


sendPrivateMessageAsSubreddit()
sendPrivateMessageAsSubreddit(options): Promise<void>

Sends a private message to a user on behalf of a subreddit.

Parameters
options
SendPrivateMessageAsSubredditOptions

The options for sending the message as a subreddit.

Returns
Promise<void>

A Promise that resolves if the private message was successfully sent.


setModeratorPermissions()
setModeratorPermissions(username, subredditName, permissions): Promise<void>

Update the permissions of a moderator of a subreddit.

Parameters
username
string

The username of the user to update the permissions for. e.g. 'spez'

subredditName
string

The name of the subreddit. e.g. 'memes'

permissions
ModeratorPermission[]

The permissions to give the user. e.g ['posts', 'wiki']

Returns
Promise<void>


setPostFlair()
setPostFlair(options): Promise<void>

Set the flair for a post in a subreddit.

Parameters
options
SetPostFlairOptions

Options for the request

Returns
Promise<void>


setUserFlair()
setUserFlair(options): Promise<void>

Set the flair for a user in a subreddit.

Parameters
options
SetUserFlairOptions

Options for the request

Returns
Promise<void>


setUserFlairBatch()
setUserFlairBatch(subredditName, flairs): Promise<FlairCsvResult[]>

Set the flair of multiple users in the same subreddit with a single API call. Can process up to 100 entries at once.

Parameters
subredditName
string

The name of the subreddit to edit flairs in.

flairs
SetUserFlairBatchConfig[]

Array of user flair configuration objects. If both text and cssClass are empty for a given user the flair will be cleared.

Returns
Promise<FlairCsvResult[]>

Array of statuses for each entry provided.

submitComment()
submitComment(options): Promise<Comment>

Submit a new comment to a post or comment.

Parameters
options
CommentSubmissionOptions & object

You must provide either options.text or options.richtext but not both.

Returns
Promise<Comment>

A Promise that resolves to a Comment object.

Example
import { RunAs } from '@devvit/public-api';

const comment = await reddit.submitComment({
  id: 't1_1qgif',
  text: 'Hello world!',
  runAs: RunAs.APP,
});


submitPost()
submitPost(options): Promise<Post>

Submits a new post to a subreddit.

Parameters
options
SubmitPostOptions

Either a self post or a link post.

Returns
Promise<Post>

A Promise that resolves to a Post object.

Examples
const post = await reddit.submitPost({
  subredditName: 'devvit',
  title: 'Hello World',
  richtext: new RichTextBuilder()
    .heading({ level: 1 }, (h) => {
      h.rawText('Hello world');
    })
    .codeBlock({}, (cb) => cb.rawText('This post was created via the Devvit API'))
    .build(),
});

By default, submitPost() creates a Post on behalf of the App account, but it may be called on behalf of the User making the request by setting the option runAs: RunAs.USER. When using runAs: RunAs.USER to create an experience Post, you must specify the userGeneratedContent option. For example:

import { RunAs } from '@devvit/public-api';

const post = await reddit.submitPost({
 title: 'My Devvit Post',
 runAs: RunAs.USER,
 userGeneratedContent: {
   text: "hello there",
   imageUrls: ["https://styles.redditmedia.com/t5_5wa5ww/styles/communityIcon_wyopomb2xb0a1.png", "https://styles.redditmedia.com/t5_49fkib/styles/bannerBackgroundImage_5a4axis7cku61.png"]
   },
 subredditName: await reddit.getCurrentSubredditName(),
 textFallback: {
   text: 'This is a Devvit post!',
 },
 preview: (
   <vstack height="100%" width="100%" alignment="middle center">
     <text size="large">Loading...</text>
   </vstack>
 ),
});



subscribeToCurrentSubreddit()
subscribeToCurrentSubreddit(): Promise<void>

Subscribes to the subreddit in which the app is installed. No-op if the user is already subscribed. This method will execute as the app account by default. To subscribe on behalf of a user, please contact Reddit.

Returns
Promise<void>


unbanUser()
unbanUser(username, subredditName): Promise<void>

Unban a user from a subreddit.

Parameters
username
string

The username of the user to unban. e.g. 'spez'

subredditName
string

The name of the subreddit to unban the user from. e.g. 'memes'

Returns
Promise<void>


unbanWikiContributor()
unbanWikiContributor(username, subredditName): Promise<void>

Parameters
username
string

The username of the user to unban. e.g. 'spez'

subredditName
string

The name of the subreddit to unban the user from contributing to the wiki on. e.g. 'memes'

Returns
Promise<void>


unmuteUser()
unmuteUser(username, subredditName): Promise<void>

Unmute a user in a subreddit. Unmuting a user allows them to send modmail.

Parameters
username
string

The username of the user to unmute. e.g. 'spez'

subredditName
string

The name of the subreddit to unmute the user in. e.g. 'memes'

Returns
Promise<void>


unsubscribeFromCurrentSubreddit()
unsubscribeFromCurrentSubreddit(): Promise<void>

Unsubscribes from the subreddit in which the app is installed. No-op if the user isn't subscribed. This method will execute as the app account by default. To unsubscribe on behalf of a user, please contact Reddit.

Returns
Promise<void>


updateWikiPage()
updateWikiPage(options): Promise<WikiPage>

Update a wiki page.

Parameters
options
UpdateWikiPageOptions

Options for the request

Returns
Promise<WikiPage>

The updated WikiPage object.


updateWikiPageSettings()
updateWikiPageSettings(options): Promise<WikiPageSettings>

Update the settings for a wiki page.

Parameters
options
UpdatePageSettingsOptions

Options for the request

Returns
Promise<WikiPageSettings>

A WikiPageSettings object.